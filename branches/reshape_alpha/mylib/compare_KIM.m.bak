function  [kEKerWeight,kEbias,kEstatus,kEalpha,kDALrf] = compare_KIM(env,status,graph,ggsim,DAL);
%%% ==< Kim >==
if strcmp('kim','kim')
  tmp.kmethod = 2; 
  kDAL = DAL;
  kDAL.speedup =0;
  opt = DAL.opt;

  kenv = env;  %++bug: ?.

  load([rootdir_ '/indir/Simulation/data_sim_9neuron.mat'])
  [L,N] = size(X);
  kDrow = floor(L/3);

  fprintf('\tGenerating Matrix for DAL\n');
  [kD kpenalty] = gen_designMat(kenv,ggsim,X,kDrow);

  kpEKerWeight{1} = zeros(ggsim.ihbasprs.nbase,kenv.cnum);
  kpEbias{1} = 0;

  if strcmp('dalprgl','dalprgl')
    kpI= X((end - kDrow +1): end,:);
  end

  for ii1 = 1:kDAL.loop % search appropriate parameter.
    for i1 = 1:N % ++parallelization 
      switch  tmp.kmethod
        case 1
          %% logistic regression group lasso
          [kEKerWeight{i1}, kEbias{i1}, kEstatus{i1}] = ...
              dallrgl( zeros(ggsim.ihbasprs.nbase,kenv.cnum), 0,...
                       kD, kpenalty(:,i1), kDAL.lambda(ii1),...
                       opt);
        case 2
          %% poisson regression group lasso
          if kDAL.speedup == 0
            [kpEKerWeight{i1}, kpEbias{i1}, kpEstatus{i1}] = ...
                dalprgl( zeros(ggsim.ihbasprs.nbase*kenv.cnum,1), 0,...
                         kD, kpI(:,i1), kDAL.lambda(ii1),...
                         'blks',repmat([ggsim.ihbasprs.nbase],[1 kenv.cnum]));
          else
            [kpEKerWeight{i1}, kpEbias{i1}, kpEstatus{i1}] = ...
                dalprgl( kpEKerWeight{i1}, kpEbias{i1}, ...
                         kD, kpI(:,i1), kDAL.lambda(ii1),...
                         'blks',repmat([ggsim.ihbasprs.nbase],[1 kenv.cnum]));
          end
        case 3
          %% poisson regression group lasso: error? Can't be run.
          if kDAL.speedup == 0
            [kpEKerWeight{i1}, kpEbias{i1}, kpEstatus{i1}] = ...
                dalprgl( zeros(ggsim.ihbasprs.nbase,kenv.cnum), 0,...
                         kD, kpI(:,i1), kDAL.lambda(ii1),...
                         opt);
          else
            [kpEKerWeight{i1}, kpEbias{i1}, kpEstatus{i1}] = ...
                dalprgl( kpEKerWeight{i1}, kpEbias{i1}, ...
                         kD, kpI(:,i1), kDAL.lambda(ii1)...
                         ,opt);

          end
      end

      if graph.PLOT_T == 1
        switch tmp.method
          case 1
            [ kEalpha{ii1} ] = plot_Ealpha(kEKerWeight,kEbias,kenv,ggsim,strcat(['Kim:dallrgl:kDAL ' ...
                                'lambda'],num2str(kDAL.lambda(ii1))));
          case {2,3}
            [ kEalpha{ii1} ] = plot_Ealpha(kpEKerWeight,kpEbias,kenv,ggsim, ...
                                      strcat(['Kim:dalprgl:kDAL lambda'],num2str(kDAL.lambda(ii1))));
        end
      end
      kDAL.speedup = 1;
      if ii1 < DAL.loop
        %        kDAL.lambda(ii1+1) = kDAL.lambda(ii1)/5;
        kDAL.lambda(ii1+1) = kDAL.lambda(ii1)/kDAL.div;
      end
    end
  end
end
%%% ==</Kim >==
