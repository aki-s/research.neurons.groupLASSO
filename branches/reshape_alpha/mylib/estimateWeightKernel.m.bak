function [pEKerWeight,pEbias,pEstatus,Ealpha,DAL] = estimateWeightKernel(env,status,graph,ggsim,I,DAL);
%%
%%
%%
%%

tic;

opt = DAL.opt;

if strcmp('allI','allI_')  %++conf
  %%% use all available firing history.
  %% Drow: length of total frames used at loss function.
  DAL.Drow = env.genLoop - size(ggsim.iht,1) +1; 
else
  DAL.Drow = floor(env.genLoop/4);
end

%% ==< init variables >==
tmp.method = 3;

DAL.speedup =0;
DAL.loop = 3;
DAL.regFac = zeros(1,DAL.loop); % DAL.regFac: regularization factor.
if strcmp('setRegFac_auto','setRegFac_auto')
  %  DAL.regFac(1) = sqrt(ggsim.ihbasprs.nbase)*10; % DAL.regFac: group LASSO parameter.
  %  DAL.regFac(1) = sqrt(ggsim.ihbasprs.nbase); % DAL.regFac:
  DAL.regFac(1) = uint32(sqrt(DAL.Drow)); % DAL.regFac:
else
  DAL.regFac(1) = 1; % DAL.regFac: group LASSO parameter.
end
DAL.div = uint8(sqrt(DAL.regFac(1)));
%% ==</init variables >==

if status.GEN_TrureValues == 1
  %% dimension reduction to be estimated.
  fprintf('\tGenerating Matrix for DAL\n');
  [D penalty] = gen_designMat(env,ggsim,I,DAL.Drow);
  DAL.D = D;
  DAL.penalty = penalty;
elseif    exist('D') && exist('penalty')
  warning('reused Matrix ''DAL.D'' and ''DAL.penalty''.');
end


if strcmp('my','my')

  if strcmp('dalprgl','dalprgl')
    pI= I(end - DAL.Drow +1: end,:);
  end
  switch tmp.method
    case 1
      EKerWeight{1} = zeros(ggsim.ihbasprs.nbase,env.cnum);
      Ebias{1} = 0;
    case (2|3)
      pEKerWeight{1} = zeros(ggsim.ihbasprs.nbase,env.cnum);
      pEbias{1} = 0;
  end
  for ii1 = 1:DAL.loop % search appropriate parameter.
    for i1 = 1:env.cnum % ++parallelization 
      switch  tmp.method
        %%+improve: save all data for various tmp.method
        case 1
          %% logistic regression group lasso
          [EKerWeight{i1}, Ebias{i1}, Estatus{i1}] = ...
              dallrgl( zeros(ggsim.ihbasprs.nbase,env.cnum), 0,...
                       D, penalty(:,i1), DAL.regFac(ii1),...
                       opt);
        case 2
          %% poisson regression group lasso: blk
          %% Returned pEKerWeight must be [10x9], not be [90x1] %++bug
          if DAL.speedup == 0
            [pEKerWeight{i1}, pEbias{i1}, pEstatus{i1}] = ...
                dalprgl( zeros(ggsim.ihbasprs.nbase*env.cnum,1), 0,...
                         D, pI(:,i1), DAL.regFac(ii1),...
                         'blks',repmat([ggsim.ihbasprs.nbase],[1 env.cnum]));
          else
            [pEKerWeight{i1}, pEbias{i1}, pEstatus{i1}] = ...
                dalprgl( pEKerWeight{i1}, pEbias{i1}, ...
                         D, pI(:,i1), DAL.regFac(ii1),...
                         'blks',repmat([ggsim.ihbasprs.nbase],[1 env.cnum]));
          end
        case 3
          %% poisson regression group lasso: 
          if DAL.speedup == 0
            [pEKerWeight{i1}, pEbias{i1}, pEstatus{i1}] = ...
                dalprgl( zeros(ggsim.ihbasprs.nbase,env.cnum), 0,...
                         D, pI(:,i1), DAL.regFac(ii1)...
                         ,opt);
            %                       );
          else
            [pEKerWeight{i1}, pEbias{i1}, pEstatus{i1}] = ...
                dalprgl( pEKerWeight{i1}, pEbias{i1}, ...
                         D, pI(:,i1), DAL.regFac(ii1)...
                         ,opt);
            %             );
          end
      end
    end
    %++improve: plot lambda [title.a]={};
    if graph.PLOT_T == 1
      switch tmp.method
        case 1
          [ Ealpha{ii1} ] = plot_Ealpha(EKerWeight,Ebias,env,ggsim,strcat(['dallrgl:DAL ' ...
                              'regFac'],num2str(DAL.regFac(ii1))));
        case {2,3}
          [ Ealpha{ii1} ] = plot_Ealpha(pEKerWeight,pEbias,env,ggsim, ...
                                        strcat(['dalprgl:DAL regFac'],num2str(DAL.regFac(ii1))));
      end
    end
    DAL.speedup = 1;
    if ii1 < DAL.loop
      %      DAL.regFac(ii1+1) = DAL.regFac(ii1)/5;
      DAL.regFac(ii1+1) = DAL.regFac(ii1)/DAL.div;
    end
  end

  status.time.estimate_TrueValue = toc;
end

switch tmp.method
  case 1
    pEKerWeight = EKerWeight;
    pEbias = Ebias;
    pEstatus = Estatus;
end
